// üõ°Ô∏è SOLU√á√ÉO DEFINITIVA META PIXEL - LIMPEZA + DETEC√á√ÉO + BLOQUEIO SIMPLES
declare global {
  interface Window {
    fbq: any;
    _fbq: any;
    __META_PIXEL_INITIALIZED__: boolean;
    __META_PIXEL_VERIFIED_UNIQUE__: boolean;
  }
}

// üßπ FUN√á√ÉO DE LIMPEZA TOTAL
const performTotalCleanup = (): void => {
  console.log('üßπ === LIMPEZA TOTAL META PIXEL ===');
  
  // 1. Remover TODOS os scripts fbevents
  const allFbScripts = document.querySelectorAll('script[src*="fbevents"], script[id*="pixel"], script[id*="facebook"]');
  console.log(`üóëÔ∏è Encontrados ${allFbScripts.length} scripts relacionados ao Meta Pixel`);
  allFbScripts.forEach((script, index) => {
    console.log(`üóëÔ∏è Removendo script ${index + 1}:`, script.outerHTML.substring(0, 100));
    script.remove();
  });
  
  // 2. Remover scripts inline com fbevents
  const allScripts = document.querySelectorAll('script:not([src])');
  let inlineRemoved = 0;
  allScripts.forEach((script) => {
    if (script.innerHTML && script.innerHTML.includes('fbevents.js')) {
      console.log('üóëÔ∏è Removendo script inline com fbevents');
      script.remove();
      inlineRemoved++;
    }
  });
  console.log(`üóëÔ∏è Removidos ${inlineRemoved} scripts inline`);
  
  // 3. Remover noscript do pixel
  const noscripts = document.querySelectorAll('noscript');
  let noscriptRemoved = 0;
  noscripts.forEach((noscript) => {
    if (noscript.innerHTML && noscript.innerHTML.includes('facebook.com/tr')) {
      console.log('üóëÔ∏è Removendo noscript do pixel');
      noscript.remove();
      noscriptRemoved++;
    }
  });
  console.log(`üóëÔ∏è Removidos ${noscriptRemoved} noscripts`);
  
  // 4. Limpar window.fbq completamente
  if (window.fbq) {
    console.log('üóëÔ∏è Limpando window.fbq existente');
    delete window.fbq;
  }
  
  if (window._fbq) {
    console.log('üóëÔ∏è Limpando window._fbq existente');
    delete window._fbq;
  }
  
  console.log('‚úÖ Limpeza total conclu√≠da');
};

// üîç FUN√á√ÉO DE VERIFICA√á√ÉO √öNICA
const verifyPixelUniqueness = (): boolean => {
  console.log('üîç === VERIFICA√á√ÉO DE UNICIDADE ===');
  
  // 1. Verificar scripts fbevents
  const fbScripts = document.querySelectorAll('script[src*="fbevents"]');
  if (fbScripts.length > 1) {
    console.log(`‚ùå M√∫ltiplos scripts fbevents: ${fbScripts.length}`);
    return false;
  }
  
  // 2. Verificar inicializa√ß√µes m√∫ltiplas na queue
  if (window.fbq && window.fbq.queue) {
    const initCalls = window.fbq.queue.filter((call: any) => call[0] === 'init');
    if (initCalls.length > 1) {
      console.log(`‚ùå M√∫ltiplas inicializa√ß√µes na queue: ${initCalls.length}`);
      return false;
    }
  }
  
  console.log('‚úÖ Pixel √∫nico verificado');
  return true;
};

// üöÄ FUN√á√ÉO DE INJE√á√ÉO √öNICA E DEFINITIVA
export const injectMetaPixel = (): void => {
  console.log('üöÄ === INJE√á√ÉO √öNICA E DEFINITIVA META PIXEL ===');
  
  // ‚úÖ SSR check
  if (typeof window === 'undefined') {
    console.log('üö´ SSR detectado');
    return;
  }
  
  // üõ°Ô∏è Verificar se j√° foi inicializado
  if (window.__META_PIXEL_INITIALIZED__) {
    console.log('üö´ Meta Pixel j√° inicializado - BLOQUEANDO duplica√ß√£o');
    return;
  }
  
  // ‚úÖ Verificar Pixel ID
  const pixelId = import.meta.env.VITE_FACEBOOK_PIXEL_ID;
  if (!pixelId) {
    console.error('‚ùå VITE_FACEBOOK_PIXEL_ID n√£o configurado');
    return;
  }
  
  console.log(`üéØ Inicializando Meta Pixel √öNICO - ID: ${pixelId}`);
  
  // üßπ LIMPEZA TOTAL PRIMEIRO
  performTotalCleanup();
  
  // üõ°Ô∏è DEFINIR FLAGS IMEDIATAMENTE
  window.__META_PIXEL_INITIALIZED__ = true;
  
  // ‚è∞ Aguardar um momento para garantir limpeza
  setTimeout(() => {
    // üíâ Criar O √öNICO script permitido
    console.log('üíâ Criando O √öNICO script Meta Pixel...');
    
    const script = document.createElement('script');
    script.async = true;
    script.id = 'meta-pixel-unico-definitivo';
    script.src = 'https://connect.facebook.net/en_US/fbevents.js';
    
    // üîß Definir fbq √öNICO
    window.fbq = function () {
      window.fbq.callMethod
        ? window.fbq.callMethod.apply(window.fbq, arguments)
        : window.fbq.queue.push(arguments);
    };
    window.fbq.queue = [];
    window.fbq.loaded = true;
    window.fbq.version = '2.0';
    
    script.onload = () => {
      console.log('‚úÖ Script Meta Pixel √öNICO carregado');
      
      setTimeout(() => {
        try {
          // Verificar unicidade antes de inicializar
          if (!verifyPixelUniqueness()) {
            console.error('‚ùå Falha na verifica√ß√£o de unicidade - abortando');
            return;
          }
          
          console.log(`üéØ Inicializando Meta Pixel √öNICO - ID: ${pixelId}`);
          
          // Usar trackSingle para m√°xima especificidade
          window.fbq('init', pixelId);
          window.fbq('trackSingle', pixelId, 'PageView');
          
          window.__META_PIXEL_VERIFIED_UNIQUE__ = true;
          console.log(`‚úÖ Meta Pixel √öNICO inicializado COM SUCESSO - ID: ${pixelId}`);
          
        } catch (error) {
          console.error('‚ùå Erro na inicializa√ß√£o √∫nica:', error);
        }
      }, 200);
    };
    
    script.onerror = () => {
      console.error('‚ùå Erro ao carregar script Meta Pixel √∫nico');
    };
    
    document.head.appendChild(script);
    console.log('üìÑ Script Meta Pixel √öNICO injetado no DOM');
    
  }, 100); // Delay para garantir limpeza
};

// üéØ TRACKING COM VERIFICA√á√ÉO TRIPLA
export const trackMetaEvent = (eventName: string, parameters?: Record<string, any>): void => {
  if (typeof window === 'undefined') {
    console.warn('‚ö†Ô∏è SSR - Meta Pixel n√£o dispon√≠vel');
    return;
  }
  
  if (!window.fbq) {
    console.warn('‚ö†Ô∏è Meta Pixel n√£o inicializado');
    return;
  }
  
  if (!window.__META_PIXEL_INITIALIZED__) {
    console.warn('‚ö†Ô∏è Meta Pixel n√£o foi inicializado via nosso sistema');
    return;
  }
  
  if (!window.__META_PIXEL_VERIFIED_UNIQUE__) {
    console.warn('‚ö†Ô∏è Meta Pixel n√£o foi verificado como √∫nico');
    return;
  }
  
  const pixelId = import.meta.env.VITE_FACEBOOK_PIXEL_ID;
  if (!pixelId) {
    console.error('‚ùå PIXEL_ID n√£o encontrado');
    return;
  }
  
  try {
    // SEMPRE usar trackSingle para especificidade m√°xima
    if (parameters) {
      window.fbq('trackSingle', pixelId, eventName, parameters);
    } else {
      window.fbq('trackSingle', pixelId, eventName);
    }
    console.log(`üìä Evento trackado via PIXEL √öNICO VERIFICADO: ${eventName}`, parameters);
  } catch (error) {
    console.error('‚ùå Erro ao trackar evento:', error);
  }
};

// üéØ FUN√á√ïES ESPEC√çFICAS
export const trackLead = (parameters?: Record<string, any>): void => {
  trackMetaEvent('Lead', parameters);
};

export const trackContact = (): void => {
  trackMetaEvent('Contact');
};

export const trackViewContent = (contentType: string, contentId?: string): void => {
  trackMetaEvent('ViewContent', {
    content_type: contentType,
    content_ids: contentId ? [contentId] : undefined
  });
};

// üî• FUN√á√ÉO DE RESET TOTAL
export const resetMetaPixel = (): void => {
  console.log('üî• === RESET TOTAL META PIXEL ===');
  
  window.__META_PIXEL_INITIALIZED__ = false;
  window.__META_PIXEL_VERIFIED_UNIQUE__ = false;
  
  performTotalCleanup();
  
  setTimeout(() => {
    console.log('üîÑ Reinicializando pixel √∫nico...');
    injectMetaPixel();
  }, 1000);
}; 